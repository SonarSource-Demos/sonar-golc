name: Build and Manual Approval Release

on:
  push:
    branches:
      - FoxDev  # Only run on changes to the FoxDev branch
  workflow_dispatch: # Allows manual triggers

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read Version from VERSION
        id: get_version
        run: |
          cat VERSION
          VER=$(cat VERSION)
          echo "VERSION=$VER" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20' # Specify your Go version

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.goos }}-${{ matrix.goarch }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.goos }}-${{ matrix.goarch }}-

      - name: Install dependencies
        run: |
          go mod tidy
          go mod download  # Download all dependencies

      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Build Go applications for ${{ matrix.goos }}/{{ matrix.goarch }}
        id:  build
        run: |
          echo "Building golc for OS: linux, Architecture: amd64"
          go build -o build/linux-amd64/golc/golc ./golc
          go build -o build/linux-amd64/results/results ./results
          
          echo "Building golc for OS: linux, Architecture: arm64"
          go build -o build/linux-arm64/golc/golc ./golc
          go build -o build/linux-arm64/results/results ./results
          
          echo "Building golc for OS: windows, Architecture: amd64"
          go build -o build/windows-amd64/golc/golc ./golc
          go build -o build/windows-amd64/results/results ./results
          
          echo "Building golc for OS: windows, Architecture: arm64"
          go build -o build/windows-arm64/golc/golc ./golc
          go build -o build/windows-arm64/results/results ./results
          
          echo "Building golc for OS: darwin, Architecture: amd64"
          go build -o build/darwin-amd64/golc/golc ./golc
          go build -o build/darwin-amd64/results/results ./results
          
          echo "Building golc for OS: darwin, Architecture: arm64"
          go build -o build/darwin-arm64/golc/golc ./golc
          go build -o build/darwin-arm64/results/results ./results

      - name: Create ZIP of both applications with version for linux-amd64
        run: |
          mkdir -p build/linux-amd64/bundle
          cp build/linux-amd64/golc/golc build/linux-amd64/bundle/golc
          cp build/linux-amd64/results/results build/linux-amd64/bundle/results
          cp README.md build/linux-amd64/bundle/README.md
          cp config_sample.json build/linux-amd64/bundle/config.json
          cp -r imgs/ build/linux-amd64/bundle/imgs
          cp -r dist/ build/linux-amd64/bundle/dist
          cd build/linux-amd64/bundle
          zip -r ../../golc-${{ env.VERSION }}-linux-amd64.zip *

      - name: Create ZIP of both applications with version for linux-arm64
        run: |
          mkdir -p build/linux-arm64/bundle
          cp build/linux-arm64/golc/golc build/linux-arm64/bundle/golc
          cp build/linux-arm64/results/results build/linux-arm64/bundle/results
          cp README.md build/linux-arm64/bundle/README.md
          cp config_sample.json build/linux-arm64/bundle/config.json
          cp -r imgs/ build/linux-arm64/bundle/imgs
          cp -r dist/ build/linux-arm64/bundle/dist
          cd build/linux-arm64/bundle
          zip -r ../../golc-${{ env.VERSION }}-linux-arm64.zip *

      - name: Create ZIP of both applications with version for windows-amd64
        run: |
          mkdir -p build/windows-amd64/bundle
          cp build/windows-amd64/golc/golc build/windows-amd64/bundle/golc
          cp build/windows-amd64/results/results build/windows-amd64/bundle/results
          cp README.md build/windows-amd64/bundle/README.md
          cp config_sample.json build/windows-amd64/bundle/config.json
          cp -r imgs/ build/windows-amd64/bundle/imgs
          cp -r dist/ build/windows-amd64/bundle/dist
          cd build/windows-amd64/bundle
          zip -r ../../golc-${{ env.VERSION }}-windows-amd64.zip *

      - name: Create ZIP of both applications with version for windows-arm64
        run: |
          mkdir -p build/windows-arm64/bundle
          cp build/windows-arm64/golc/golc build/windows-arm64/bundle/golc
          cp build/windows-arm64/results/results build/windows-arm64/bundle/results
          cp README.md build/windows-arm64/bundle/README.md
          cp config_sample.json build/windows-arm64/bundle/config.json
          cp -r imgs/ build/windows-arm64/bundle/imgs
          cp -r dist/ build/windows-arm64/bundle/dist
          cd build/windows-arm64/bundle
          zip -r ../../golc-${{ env.VERSION }}-windows-arm64.zip *

      - name: Create ZIP of both applications with version for darwin-amd64
        run: |
          mkdir -p build/darwin-amd64/bundle
          cp build/darwin-amd64/golc/golc build/darwin-amd64/bundle/golc
          cp build/darwin-amd64/results/results build/darwin-amd64/bundle/results
          cp README.md build/darwin-amd64/bundle/README.md
          cp config_sample.json build/darwin-amd64/bundle/config.json
          cp -r imgs/ build/darwin-amd64/bundle/imgs
          cp -r dist/ build/darwin-amd64/bundle/dist
          cd build/darwin-amd64/bundle
          zip -r ../../golc-${{ env.VERSION }}-darwin-amd64.zip *

      - name: Create ZIP of both applications with version for darwin-arm64
        run: |
          mkdir -p build/darwin-arm64/bundle
          cp build/darwin-arm64/golc/golc build/darwin-arm64/bundle/golc
          cp build/darwin-arm64/results/results build/darwin-arm64/bundle/results
          cp README.md build/darwin-arm64/bundle/README.md
          cp config_sample.json build/darwin-arm64/bundle/config.json
          cp -r imgs/ build/darwin-arm64/bundle/imgs
          cp -r dist/ build/darwin-arm64/bundle/dist
          cd build/darwin-arm64/bundle
          zip -r ../../golc-${{ env.VERSION }}-darwin-arm64.zip *

      - name: Upload linux/amd64
        uses: actions/upload-artifact@v3
        with:
          name: golc-${{ env.VERSION }}-linux-amd64.zip
          path: build/golc-${{ env.VERSION }}-linux-amd64.zip
          retention-days: 5
          retries: 10

      - name: Upload linux/arm64
        uses: actions/upload-artifact@v3
        with:
          name: golc-${{ env.VERSION }}-linux-arm64.zip
          path: build/golc-${{ env.VERSION }}-linux-arm64.zip
          retention-days: 5
          retries: 10

      - name: Upload windows/amd64
        uses: actions/upload-artifact@v3
        with:
          name: golc-${{ env.VERSION }}-windows-amd64.zip
          path: build/golc-${{ env.VERSION }}-windows-amd64.zip
          retention-days: 5
          retries: 10

      - name: Upload windows/arm64
        uses: actions/upload-artifact@v3
        with:
          name: golc-${{ env.VERSION }}-windows-arm64.zip
          path: build/golc-${{ env.VERSION }}-windows-arm64.zip
          retention-days: 5
          retries: 10

      - name: Upload darwin/amd64
        uses: actions/upload-artifact@v3
        with:
          name: golc-${{ env.VERSION }}-darwin-amd64.zip
          path: build/golc-${{ env.VERSION }}-darwin-amd64.zip
          retention-days: 5
          retries: 10

      - name: Upload darwin/arm64
        uses: actions/upload-artifact@v3
        with:
          name: golc-${{ env.VERSION }}-darwin-arm64.zip
          path: build/golc-${{ env.VERSION }}-darwin-arm64.zip
          retention-days: 5
          retries: 10

  release:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: production # Specify the environment name, like production or staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read Version from VERSION
        id: get_version
        run: |
          cat VERSION
          VER=$(cat VERSION)
          echo "VERSION=$VER" >> $GITHUB_ENV

      - name: Read Release Notes from RELEASE_NOTES
        run: |
          RELEASE_NOTES=$(cat RELEASE_NOTES)
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Download build artifacts
        uses: actions/download-artifact@v3

      - name: Delete existing release and tag if they exist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the release ID associated with the tag, if it exists
          RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/${{ env.VERSION }} --jq .id 2>/dev/null || echo "")
          if [ -n "$RELEASE_ID" ]; then
            echo "Deleting existing release with ID: $RELEASE_ID"
            gh api --method DELETE repos/${{ github.repository }}/releases/$RELEASE_ID || echo "Failed to delete release"
          else
            echo "Release not found for tag: ${{ env.VERSION }}"
          fi

          # Delete the tag if it exists
          TAG_EXISTS=$(git ls-remote --tags origin | grep "${{ env.VERSION }}" || echo "")
          if [ -n "$TAG_EXISTS" ]; then
            echo "Deleting existing tag: ${{ env.VERSION }}"
            git push --delete origin ${{ env.VERSION }} || true
            git tag -d ${{ env.VERSION }} || true
          else
            echo "Tag not found: ${{ env.VERSION }}"
          fi

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          draft: false
          prerelease: false
          body: |
            Release notes for version ${{ env.VERSION }}:
            ${{ env.RELEASE_NOTES }}

      - name: validate files are there
        run: |
          ls -al /home/runner/work/sonar-golc/sonar-golc
          pwd

      - name: Test GitHub API call with GITHUB_TOKEN
        run: |
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/releases

      # Upload all artifacts to the single release
      - name: Upload linux/amd64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/runner/work/sonar-golc/sonar-golc/golc-${{ env.VERSION }}-linux-amd64.zip/golc-${{ env.VERSION }}-linux-amd64.zip
          asset_name: golc-${{ env.VERSION }}-linux-amd64.zip
          asset_content_type: application/zip

      - name: Upload linux/arm64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/runner/work/sonar-golc/sonar-golc/golc-${{ env.VERSION }}-linux-arm64.zip/golc-${{ env.VERSION }}-linux-arm64.zip
          asset_name: golc-${{ env.VERSION }}-linux-arm64.zip
          asset_content_type: application/zip

      - name: Upload windows/amd64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/runner/work/sonar-golc/sonar-golc/golc-${{ env.VERSION }}-windows-amd64.zip/golc-${{ env.VERSION }}-windows-amd64.zip
          asset_name: golc-${{ env.VERSION }}-windows-amd64.zip
          asset_content_type: application/zip

      - name: Upload windows/arm64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/runner/work/sonar-golc/sonar-golc/golc-${{ env.VERSION }}-windows-arm64.zip/golc-${{ env.VERSION }}-windows-arm64.zip
          asset_name: golc-${{ env.VERSION }}-windows-arm64.zip
          asset_content_type: application/zip

      - name: Upload darwin/amd64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/runner/work/sonar-golc/sonar-golc/golc-${{ env.VERSION }}-darwin-amd64.zip/golc-${{ env.VERSION }}-darwin-amd64.zip
          asset_name: golc-${{ env.VERSION }}-darwin-amd64.zip
          asset_content_type: application/zip

      - name: Upload darwin/arm64 artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/runner/work/sonar-golc/sonar-golc/golc-${{ env.VERSION }}-darwin-arm64.zip/golc-${{ env.VERSION }}-darwin-arm64.zip
          asset_name: golc-${{ env.VERSION }}-darwin-arm64.zip
          asset_content_type: application/zip
