name: Stub Build and Manual Approval Release

on:
  push:
    branches:
      - FoxDev  # Only run on changes to the FoxDev branch
  workflow_dispatch: # Allows manual triggers

jobs:
  # Stub Build Job with Matrix for Multiple OS and Architectures
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        app: [golc, results]
        goos: [linux, windows, darwin]   # Target operating systems
        goarch: [amd64, arm64]           # Target architectures

    steps:
      - name: Read Version from VERSION.txt
        id: get_version
        run: echo "VERSION=$(cat VERSION.txt)" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20' # Specify your Go version

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.goos }}-${{ matrix.goarch }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.goos }}-${{ matrix.goarch }}-

      - name: Install dependencies
        run: |
          go mod tidy
          go mod download  # Download all dependencies

      - name: Build Go applications for ${{ matrix.goos }}/{{ matrix.goarch }}
        run: |
          echo "Building golc for OS: ${{ matrix.goos }}, Architecture: ${{ matrix.goarch }}"
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o build/${{ matrix.goos }}-${{ matrix.goarch }}/golc/golc ./golc
          
          echo "Building results for OS: ${{ matrix.goos }}, Architecture: ${{ matrix.goarch }}"
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o build/${{ matrix.goos }}-${{ matrix.goarch }}/results/results ./results

      - name: Create ZIP of both applications with version
        run: |
          mkdir -p build/${{ matrix.goos }}-${{ matrix.goarch }}/bundle
          cp build/${{ matrix.goos }}-${{ matrix.goarch }}/golc/golc build/${{ matrix.goos }}-${{ matrix.goarch }}/bundle/golc
          cp build/${{ matrix.goos }}-${{ matrix.goarch }}/results/results build/${{ matrix.goos }}-${{ matrix.goarch }}/bundle/results
          cd build/${{ matrix.goos }}-${{ matrix.goarch }}/bundle
          zip -r ../../golc-$(cat /VERSION.txt)-${{ matrix.goos }}-${{ matrix.goarch }}.zip *

      - name: Check if files exist
        run:  |
          ls -al build/${{ matrix.goos }}-${{ matrix.goarch }}
          ls -al build/${{ matrix.goos }}-${{ matrix.goarch }}/golc/golc
          ls -al build/${{ matrix.goos }}-${{ matrix.goarch }}/results/results
          ls -al build/${{ matrix.goos }}-${{ matrix.goarch }}/bundle

      - name: Upload Large Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: golc-${{ env.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/golc-${{ env.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip
          retention-days: 5
          retries: 5  # Retry upload 5 times

  release_stub:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: production # Specify the environment name, like production or staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: 'build/golc-*' # Adjust this if needed for your artifacts

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Automatically provided by GitHub Actions
        with:
          tag_name: ${{ env.VERSION }}               # The version number, e.g., v1.0.0
          release_name: Release ${{ env.VERSION }}    # The name of the release
          draft: false                               # Whether this should be a draft release
          prerelease: false                          # Set to true if this is a prerelease
          body: |
            Release notes for version ${{ env.VERSION }}:
            - Platform: ${{ matrix.goos }}
            - Architecture: ${{ matrix.goarch }}
            - Includes golc and results applications bundled.

      - name: Upload artifact to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # Uploads to the created release
          asset_path: build/golc-${{ env.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip
          asset_name: golc-${{ env.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip
          asset_content_type: application/zip
